function increaseTicket(ticketId) {
    let quantityInput = document.getElementById(`quantity-${ticketId}`);
    let stockEl = document.getElementById(`stock-${ticketId}`);

    // L·∫•y s·ªë v√© c√≤n l·∫°i hi·ªán t·∫°i t·ª´ text
    let currentStock = parseInt(stockEl.textContent.replace(/\D/g, ''));

    // L·∫•y s·ªë l∆∞·ª£ng ƒë√£ ch·ªçn hi·ªán t·∫°i
    let currentQuantity = parseInt(quantityInput.value);

    if (currentStock > 0) {  // c√≤n v√© th√¨ tƒÉng
        quantityInput.value = currentQuantity + 1;
        // C·∫≠p nh·∫≠t s·ªë v√© c√≤n l·∫°i (gi·∫£m ƒëi 1)
        updateStock(ticketId, currentStock - 1);
        updateSummary();
    } else {
        alert('B·∫°n ƒë√£ ch·ªçn t·ªëi ƒëa s·ªë v√© c√≤n l·∫°i!');
    }
}

function decreaseTicket(ticketId) {
    let quantityInput = document.getElementById(`quantity-${ticketId}`);
    let stockEl = document.getElementById(`stock-${ticketId}`);

    let currentQuantity = parseInt(quantityInput.value);
    let currentStock = getCurrentStock(stockEl);

    if (currentQuantity > 0) {
        quantityInput.value = currentQuantity - 1;
        updateStock(ticketId, currentStock + 1);
        updateSummary();
    }
}

function manualTicketChange(ticketId) {
    let quantityInput = document.getElementById(`quantity-${ticketId}`);
    let stockEl = document.getElementById(`stock-${ticketId}`);

    // L·∫•y s·ªë v√© c√≤n l·∫°i th·ª±c t·∫ø (v√≠ d·ª•: "S·ªë v√© c√≤n l·∫°i: 50" -> 50)
    let currentStock = parseInt(stockEl.textContent.replace(/\D/g, ''));

    let enteredQuantity = parseInt(quantityInput.value);

    // N·∫øu nh·∫≠p kh√¥ng h·ª£p l·ªá ho·∫∑c √¢m, set v·ªÅ 0
    if (isNaN(enteredQuantity) || enteredQuantity < 0) {
        enteredQuantity = 0;
    }

    // N·∫øu nh·∫≠p v∆∞·ª£t qu√° s·ªë v√© c√≤n l·∫°i hi·ªán t·∫°i, gi·ªõi h·∫°n l·∫°i
    if (enteredQuantity > currentStock) {
        alert(`S·ªë v√© t·ªëi ƒëa b·∫°n c√≥ th·ªÉ ch·ªçn l√† ${currentStock}`);
        enteredQuantity = currentStock;
    }

    // C·∫≠p nh·∫≠t input v·ªõi gi√° tr·ªã h·ª£p l·ªá
    quantityInput.value = enteredQuantity;

    // C·∫≠p nh·∫≠t s·ªë v√© c√≤n l·∫°i: gi·∫£m s·ªë v√© c√≤n l·∫°i ƒëi b·∫±ng s·ªë v√© ƒë√£ ch·ªçn m·ªõi
    updateStock(ticketId, currentStock - enteredQuantity);

    updateSummary();
}

function getCurrentStock(stockEl) {
    return parseInt(stockEl.textContent.replace(/\D/g, ''));
}

function updateStock(ticketId, newStock) {
    let stockEl = document.getElementById(`stock-${ticketId}`);
    stockEl.textContent = `S·ªë v√© c√≤n l·∫°i: ${newStock}`;
}

function formatPrice(price) {
    return new Intl.NumberFormat('vi-VN').format(price) + 'ƒë';
}

function updateSummary() {
    let summaryList = document.getElementById('summary-list');
    let totalEl = document.getElementById('summary-total');
    let continueBtn = document.getElementById('continue-btn');

    summaryList.innerHTML = '';

    let totalTickets = 0;
    let totalPrice = 0;
    let ticketInputs = document.querySelectorAll('.quantity-input');

    ticketInputs.forEach(input => {
        let qty = parseInt(input.value);
        if (qty > 0) {
            let name = input.getAttribute('data-name');
            let price = parseInt(input.getAttribute('data-price'));
            let li = document.createElement('li');
            li.textContent = `${name} x${qty} ‚Äî ${formatPrice(price * qty)}`;
            summaryList.appendChild(li);

            totalTickets += qty;
            totalPrice += price * qty;
        }
    });

    totalEl.innerHTML = `<strong>üéü x${totalTickets}</strong>`;

    if (continueBtn) {
        continueBtn.textContent = `Ti·∫øp t·ª•c - T·ªïng: ${formatPrice(totalPrice)}`;
    }
}

function goToCheckout() {
    let continueBtn = document.getElementById('continue-btn');
    let eventId = continueBtn.getAttribute('data-event-id');

    // Thu th·∫≠p c√°c v√© ƒë√£ ch·ªçn
    let tickets = [];
    document.querySelectorAll('.quantity-input').forEach(input => {
        let qty = parseInt(input.value);
        if (qty > 0) {
            tickets.push({
                id: input.getAttribute('data-ticket-id'),
                name: input.getAttribute('data-name'),
                price: input.getAttribute('data-price'),
                quantity: qty
            });
        }
    });

    if (tickets.length === 0) {
        alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt v√© ƒë·ªÉ ti·∫øp t·ª•c.');
        event.preventDefault();
        return;
    }

    // L∆∞u d·ªØ li·ªáu v√†o sessionStorage (ho·∫∑c localStorage) ƒë·ªÉ trang thanh to√°n d√πng
    sessionStorage.setItem('checkoutEventId', eventId);
    sessionStorage.setItem('checkoutTickets', JSON.stringify(tickets));
}


document.addEventListener('DOMContentLoaded', () => {
    let tickets = JSON.parse(sessionStorage.getItem('checkoutTickets')) || [];
    let summaryDiv = document.getElementById('ticket-summary');
    let subtotalEl = document.getElementById('subtotal');
    let totalEl = document.getElementById('total-price');

    if (tickets.length === 0) {
        summaryDiv.innerHTML = '<div class="muted">Ch∆∞a c√≥ v√© n√†o ƒë∆∞·ª£c ch·ªçn</div>';
        subtotalEl.textContent = '0 ƒë';
        totalEl.textContent = '0 ƒë';
        return;
    }

    summaryDiv.innerHTML = '';
    let totalPrice = 0;

    tickets.forEach(ticket => {
        let itemPrice = parseInt(ticket.price) * ticket.quantity;
        totalPrice += itemPrice;

        summaryDiv.innerHTML += `
            <div class="summary-row">
                <div>${ticket.name}</div>
                <div>${ticket.quantity}</div>
            </div>
            <div class="summary-row muted">
                <div>Gi√° v√©</div>
                <div>${itemPrice.toLocaleString()} ƒë</div>
            </div>
        `;
    });

    subtotalEl.textContent = totalPrice.toLocaleString() + ' ƒë';
    totalEl.textContent = totalPrice.toLocaleString() + ' ƒë';
});


let minutes = 14; let seconds = 30;
const minEl = document.getElementById('cd-min');
const secEl = document.getElementById('cd-sec');
function tick(){
  if(seconds===0){
    if(minutes===0){ clearInterval(timer); return; }
    minutes--; seconds=59;
  } else seconds--;
  minEl.textContent = String(minutes).padStart(2,'0');
  secEl.textContent = String(seconds).padStart(2,'0');
}
const timer = setInterval(tick,1000);

function handlePayment() {
    // L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n ƒëang ƒë∆∞·ª£c ch·ªçn
    const selectedPayMethod = document.querySelector('input[name="pay"]:checked').value;

    if (selectedPayMethod === "momo") {
        payment_momo();
    } else if (selectedPayMethod === "vnpay") {
        payment_vnpay();
    } else {
        alert("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.");
    }
}

function payment_momo() {
    let payBtn = document.getElementById("payBtn2");
    payBtn.disabled = true;

    let tickets = JSON.parse(sessionStorage.getItem('checkoutTickets')) || [];
    console.log(sessionStorage.getItem('checkoutTickets'));
    if (tickets.length === 0) {
        alert("Kh√¥ng c√≥ v√© ƒë·ªÉ thanh to√°n");
        payBtn.disabled = false;
        return;
    }

    let totalPrice = tickets.reduce((sum, ticket) => sum + (parseInt(ticket.price) * ticket.quantity), 0);

    fetch("/booking/create", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
            tickets: tickets,
            totalPrice: totalPrice,
            eventId: sessionStorage.getItem('checkoutEventId'),
        }),
    })
    .then(res => res.json())
    .then(bookingData => {
        if (!bookingData.success) {
            alert("T·∫°o booking th·∫•t b·∫°i: " + bookingData.message);
            payBtn.disabled = false;
            throw new Error("Booking failed");
        }
        return fetch("/payment/momo", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                amount: totalPrice,
                orderId: "order_" + bookingData.bookingId,
                orderInfo: `Thanh to√°n v√© s·ª± ki·ªán ${sessionStorage.getItem('checkoutEventId')}`,
            }),
        });
    })
    .then(res => res.json())
    .then(paymentData => {
        if (paymentData.payUrl) {
            window.location.href = paymentData.payUrl;
        } else {
            alert("Kh√¥ng t·∫°o ƒë∆∞·ª£c link thanh to√°n!");
            payBtn.disabled = false;
        }
    })
    .catch(err => {
        console.error(err);
        if (err.message !== "Booking failed") {
            alert("ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i.");
            payBtn.disabled = false;
        }
    });
}

function payment_vnpay(){

}

